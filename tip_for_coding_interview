1. 문제의 가장 효율적인 답을 못찾겠을때 어떻게 해야하나요?
   - 이럴땐 일단 가장 비효율적인 (Brute-force algorithm) 답변을 코드로 작성하는게 좋습니다. 
   가장 효율적인 답안을 생각하다가 시간을 다 써버리게 되면 제출할 코드가 없기때문에 비효율적인 답변을 일단 작성하면서 더 좋은 방법이 있는지 생각하는게 좋습니다.
2. 문제를 받으면 바로 답변 코드를 종이에 적으면 되나요?  
   - 답변이 생각났으면 바로 코드를 적는것보단 어떻게 코드를 작성할것인지,
   왜 이 방법이 좋은지 설명을 한후 코드를 작성하는게 좋습니다. 엣지케이스 커버하는것을 까먹지마세요!
3. 답변은 무슨 언어로 쓰는게 제일 좋은가요?
   - 실리콘밸리 회사들은 주로 언어를 상관하지 않습니다. 
   가장 잘할수있는 언어로 코드를 작성하시거나, 의사코드를 제출해도 되냐고 물어본후 의사코드로 작성해도 됩니다.
4. 답변 코드를 쓴 후 코드를 어떻게 설명하나요?
   - 코드를 설명할땐, 시간복잡도, 공간복잡도, 엣지케이스를 꼭 설명하셔야 합니다. 
   그 후, 코드를 더 효율적으로 바꿀 방법을 제시하거나 다른 해답 방법을 설명하는것이 좋습니다.

1. What should I do if I can not find the most efficient answer to the problem?
   - In this case, it is best to code the most inefficient (Brute-force algorithm) answer. 
   Since you do not have the code to submit once you have spent the most time thinking about the most efficient answer, 
   it is best to write ineffective answers and think about the better way.
2. When I get a problem, can I write my answer code on paper?
   - If you think of the answer, it is better to write the code after describing how to write the code 
   and why it is better than writing the code right away. Do not forget to cover the edge case!
3. What is the best language to use for answering?
   - Silicon Valley companies mainly do not care about language. You can write your code in the best language, 
   or ask if you can submit a pseudocode and write it in pseudocode.
4. How do you describe the code after writing the answer code?
   - When describing the code, be sure to explain time complexity, spatial complexity, and edge cases. After that, 
   it's a good idea to suggest ways to change your code more efficiently or explain other answer methods.
